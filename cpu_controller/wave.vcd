$date
	Sun Jul 06 10:21:39 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! rom_out [3:0] $end
$var wire 4 " reg_out [3:0] $end
$var wire 3 # pc_out [2:0] $end
$var wire 1 $ carry_out $end
$var wire 4 % alu_out [3:0] $end
$var parameter 32 & CLK_PERIOD $end
$var reg 4 ' alu_in_data [3:0] $end
$var reg 1 ( clk $end
$var reg 4 ) mux_in_data [3:0] $end
$var reg 1 * rstn $end
$var reg 1024 + vcdfile [1023:0] $end
$scope module uut $end
$var wire 4 , alu_in_data [3:0] $end
$var wire 4 - alu_out [3:0] $end
$var wire 1 ( clk $end
$var wire 4 . mux_in_data [3:0] $end
$var wire 3 / pc_out [2:0] $end
$var wire 4 0 reg_out [3:0] $end
$var wire 4 1 rom_out [3:0] $end
$var wire 1 * rstn $end
$var wire 4 2 rom_instruction [3:0] $end
$var wire 4 3 reg_data [3:0] $end
$var wire 3 4 pc_addr [2:0] $end
$var wire 1 5 mux_sel $end
$var wire 4 6 mux_out [3:0] $end
$var wire 1 7 load $end
$var wire 1 $ carry_out $end
$var wire 2 8 alu_sel [1:0] $end
$var wire 4 9 alu_result [3:0] $end
$scope module alu_inst $end
$var wire 4 : b [3:0] $end
$var wire 2 ; sel [1:0] $end
$var wire 4 < a [3:0] $end
$var reg 1 $ carry_out $end
$var reg 4 = out [3:0] $end
$var reg 1 > zero_flag $end
$upscope $end
$scope module mux_inst $end
$var wire 4 ? a [3:0] $end
$var wire 4 @ b [3:0] $end
$var wire 1 5 sel $end
$var wire 4 A out [3:0] $end
$upscope $end
$scope module pc_inst $end
$var wire 1 ( clk $end
$var wire 1 * rstn $end
$var reg 3 B out [2:0] $end
$upscope $end
$scope module reg_inst $end
$var wire 1 ( clk $end
$var wire 4 C d [3:0] $end
$var wire 1 7 load $end
$var wire 1 * rstn $end
$var reg 4 D q [3:0] $end
$upscope $end
$scope module rom_inst $end
$var wire 3 E addr [2:0] $end
$var reg 4 F out [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 &
$end
#0
$dumpvars
b1 F
b0 E
b0 D
b10 C
b0 B
b10 A
b0 @
b10 ?
1>
b0 =
b0 <
b0 ;
b1 :
b0 9
b0 8
17
b10 6
05
b0 4
b0 3
b1 2
b1 1
b0 0
b0 /
b10 .
b0 -
b1 ,
b110001101110000011101010101111101100011011011110110111001110100011100100110111101101100011011000110010101110010001011110111011101100001011101100110010100101110011101100110001101100100 +
0*
b10 )
0(
b1 '
b0 %
0$
b0 #
b0 "
b1 !
$end
#5000
1(
#10000
0(
1*
#15000
0>
b11 %
b11 -
b11 9
b11 =
b11 @
b1 8
b1 ;
b101 !
b101 1
b101 2
b101 F
b1 #
b1 /
b1 4
b1 B
b1 E
b10 "
b10 0
b10 3
b10 <
b10 D
1(
#20000
0(
#25000
b10 8
b10 ;
b1001 !
b1001 1
b1001 2
b1001 F
b10 #
b10 /
b10 4
b10 B
b10 E
1(
#30000
0(
#35000
b11 8
b11 ;
b1101 !
b1101 1
b1101 2
b1101 F
b11 #
b11 /
b11 4
b11 B
b11 E
1(
#40000
0(
#45000
b11 6
b11 A
b11 C
15
b1111 !
b1111 1
b1111 2
b1111 F
b100 #
b100 /
b100 4
b100 B
b100 E
1(
#50000
0(
#55000
b100 6
b100 A
b100 C
b100 %
b100 -
b100 9
b100 =
b100 @
b101 #
b101 /
b101 4
b101 B
b101 E
b11 "
b11 0
b11 3
b11 <
b11 D
1(
#60000
0(
#65000
b100 "
b100 0
b100 3
b100 <
b100 D
b110 #
b110 /
b110 4
b110 B
b110 E
b111 6
b111 A
b111 C
b111 %
b111 -
b111 9
b111 =
b111 @
1(
b11 '
b11 ,
b11 :
b1111 )
b1111 .
b1111 ?
#70000
0(
#75000
07
05
b0 8
b0 ;
b1111 6
b1111 A
b1111 C
b0 !
b0 1
b0 2
b0 F
b11 %
b11 -
b11 9
b11 =
b11 @
b111 #
b111 /
b111 4
b111 B
b111 E
b111 "
b111 0
b111 3
b111 <
b111 D
1(
#80000
0(
#85000
17
b1 !
b1 1
b1 2
b1 F
b0 #
b0 /
b0 4
b0 B
b0 E
1(
#90000
0(
#95000
b1111 %
b1111 -
b1111 9
b1111 =
b1111 @
b1 8
b1 ;
b101 !
b101 1
b101 2
b101 F
b1 #
b1 /
b1 4
b1 B
b1 E
b1111 "
b1111 0
b1111 3
b1111 <
b1111 D
1(
#100000
0(
#105000
b1100 %
b1100 -
b1100 9
b1100 =
b1100 @
b10 8
b10 ;
b1001 !
b1001 1
b1001 2
b1001 F
b10 #
b10 /
b10 4
b10 B
b10 E
1(
#110000
0(
#115000
1$
b10 %
b10 -
b10 9
b10 =
b10 @
b11 8
b11 ;
b1101 !
b1101 1
b1101 2
b1101 F
b11 #
b11 /
b11 4
b11 B
b11 E
1(
